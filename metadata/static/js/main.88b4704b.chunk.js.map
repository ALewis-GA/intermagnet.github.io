{"version":3,"sources":["constants/actionTypes.js","reducers/index.js","components/StationMap.jsx","constants/index.js","actions/index.js","components/StationTable.jsx","containers/App.jsx","App.jsx","serviceWorker.js","index.js"],"names":["FETCH_METADATA_PENDING","concat","FETCH_METADATA_FULFILLED","FETCH_METADATA_REJECTED","initialState","intermagnet","stations","features","contacts","institutes","definitive","map","center","zoom","query","isFetching","error","rootReducer","combineReducers","state","arguments","length","undefined","action","type","Object","objectSpread","payload","institues","station","properties","selected","includes","id","highlighted","types","StationMap","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","popups","_this2","forEach","leafletElement","openOn","_this3","setTimeout","_onResize","_this4","_this$props","markers","react_default","a","createElement","CircleMarker","key","geometry","coordinates","color","Popup","ref","node","style","height","Map","TileLayer","attribution","url","React","Component","connect","URL_METADATA_INSTITUTES","URL_METADATA_CONTACTS","URL_METADATA_INTERMAGNET","URL_METADATA_DEFINITIVE","COUNTRY_CODES","aq","ar","at","au","be","bg","br","ca","cf","cl","cn","cz","de","dk","dz","es","et","fi","fk","fr","gb","gf","gl","gr","gs","hr","hu","ie","in","it","jp","kr","kz","lb","mg","mv","mx","na","no","nz","pe","pf","pk","pl","ro","rs","ru","se","sh","sk","sn","tf","tr","tw","ua","us","vn","ws","za","dispatch","setMapCenter","coord","actions","selectStations","highlightStations","columns","Header","accessor","width","Cell","row","value","react_table_es","data","className","filterable","sorted","desc","getTrProps","rowInfo","onClick","original","onMouseOver","App","fetchStations","fetchInstitutes","fetchContacts","fetchDefinitive","then","Row","Col","sm","components_StationTable","components_StationMap","Promise","resolve","axios","get","responseType","response","longitude","latitude","elevation","convertIntermagnetToGeoSJON","store","createStore","reducer","applyMiddleware","promise","thunk","logger","containers_App","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.88b4704b.chunk.js","sourcesContent":["/**\n * @module constants/actionTypes\n * @author Charles Blais, Natural Resource Canada <charles.blais@canada.ca>\n *\n * Action types\n * ============\n */\n\n// Fetch from metadata host\nexport const FETCH_METADATA = 'FETCH_METADATA';\nexport const FETCH_METADATA_PENDING = `${FETCH_METADATA}_PENDING`;\nexport const FETCH_METADATA_FULFILLED = `${FETCH_METADATA}_FULFILLED`;\nexport const FETCH_METADATA_REJECTED = `${FETCH_METADATA}_REJECTED`;\n\n// Actions related to setting from the metadata host\nexport const SET_STATIONS = 'SET_STATIONS';\nexport const SET_CONTACTS = 'SET_CONTACTS';\nexport const SET_DEFINITIVE = 'SET_DEFINITVE';\nexport const SET_INSTITUTES = 'SET_INSTITUTES';\n\n// Map actions\nexport const SET_MAP_CENTER = 'SET_MAP_CENTER';\nexport const SET_MAP_ZOOM = 'SET_MAP_ZOOM';\n\n// Misc\nexport const SELECT_STATIONS = 'SELECT_STATIONS';\nexport const HIGHLIGHT_STATIONS = 'HIGHLIGHT_STATIONS';\n","/**\n * @module reducer\n * @author Charles Blais, Natural Resource Canada <charles.blais@canada.ca>\n *\n * Reducer\n * =======\n * Redux reducer that contains a modal object and an object for all form\n * fields.\n *\n * Redux store structure:\n *  - intermagnet = GeoJSON object of INTERMAGNET stations with metdata\n *      behind the scene, the intermagnet URL is converted to GeoJSON and contacts,\n *      institues, and definitive is added as properties.  For details on the INTERMAGNET\n *      structure, see the actions module.\n *  - statusModal\n *      - show = display the status modal\n *      - content = text on the status modal\n */\n\n\n// General modules\nimport { combineReducers } from 'redux';\n\n// User contributed modules\nimport * as types from '../constants/actionTypes';\n\n// Initial state\nconst initialState = {\n  intermagnet: {\n    stations: {\n      features: [],\n    },\n    contacts: [],\n    institutes: [],\n    definitive: [],\n  },\n  map: {\n    center: [0, 0],\n    zoom: 2,\n  },\n  query: {\n    isFetching: false,\n    error: null,\n  },\n};\n\n/**\n * Reducer associated with intermagnet object\n *\n * @param {Object} [state=initialState.intermagnet] - state\n * @param {Object} action - redux action\n * @return updated state\n */\nconst intermagnetReducer = (state = initialState.intermagnet, action) => {\n  switch (action.type) {\n    case types.SET_STATIONS:\n      return { ...state, stations: action.payload };\n    case types.SET_CONTACTS:\n      return { ...state, contacts: action.payload };\n    case types.SET_DEFINITIVE:\n      return { ...state, definitive: action.payload };\n    case types.SET_INSTITUTES:\n      return { ...state, institues: action.payload };\n    case types.SELECT_STATIONS: {\n      let { features } = state.stations;\n      features = features.map((station) => {\n        const { properties } = station;\n        properties.selected = action.payload.includes(properties.id);\n        return { ...station, properties };\n      });\n      return { ...state, stations: { type: 'FeatureCollection', features } };\n    }\n    case types.HIGHLIGHT_STATIONS: {\n      let { features } = state.stations;\n      features = features.map((station) => {\n        const { properties } = station;\n        properties.highlighted = action.payload.includes(properties.id);\n        return { ...station, properties };\n      });\n      return { ...state, stations: { type: 'FeatureCollection', features } };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\n\n/**\n * Reducer associated with fetching map object\n *\n * @param {Object} [state=initialState.map] - map store\n * @param {Object} action - redux action\n * @return new state\n */\nconst mapReducer = (state = initialState.map, action) => {\n  switch (action.type) {\n    case types.SET_MAP_CENTER:\n      return { ...state, center: action.payload };\n    case types.SET_MAP_ZOOM:\n      return { ...state, zoom: action.payload };\n    default:\n      return state;\n  }\n};\n\n\n/**\n * Reducer associated with fetching status object\n *\n * @param {Object} [state=initialState.query] - query store\n * @param {Object} action - redux action\n * @return new state\n */\nconst queryReducer = (state = initialState.query, action) => {\n  switch (action.type) {\n    case types.FETCH_METADATA_PENDING:\n      return { ...state, isFetching: true, error: null };\n    case types.FETCH_METADATA_FULFILLED:\n      return { ...state, isFetching: false };\n    case types.FETCH_METADATA_REJECTED:\n      return { ...state, isFetching: false, error: action.payload };\n    default:\n      return state;\n  }\n};\n\n\n// Combine reducers\nconst rootReducer = combineReducers({\n  intermagnet: intermagnetReducer,\n  map: mapReducer,\n  query: queryReducer,\n});\n\nexport default rootReducer;\n","/**\n * @module components/StationMap\n * @author Charles Blais, Natural Resource Canada <charles.blais@canada.ca>\n *\n * Main application\n * ================\n */\n\n// General modules\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {\n  Map,\n  TileLayer,\n  CircleMarker,\n  Popup,\n} from 'react-leaflet';\n\nimport 'leaflet/dist/leaflet.css';\n\nclass StationMap extends React.Component {\n  constructor(props) {\n    super(props);\n    this.map = null;\n    this.popups = {};\n  }\n\n  componentWillReceiveProps() {\n    const { stations } = this.props;\n    stations.features.forEach((station) => {\n      if (station.properties.selected && station.properties.id in this.popups) {\n        this.popups[station.properties.id].leafletElement.openOn(this.map.leafletElement);\n      }\n    });\n  }\n\n  componentDidUpdate() {\n    if (this.map) {\n      // eslint-disable-next-line no-underscore-dangle\n      setTimeout(() => this.map.leafletElement._onResize(), 300);\n    }\n  }\n\n  render() {\n    const { stations, zoom, center } = this.props;\n    const markers = stations.features.map(station => (\n      <CircleMarker\n        key={station.properties.id}\n        center={[station.geometry.coordinates[1], station.geometry.coordinates[0]]}\n        color={station.properties.highlighted ? 'red' : 'blue'}\n      >\n        <Popup ref={(node) => { this.popups[station.properties.id] = node; }}>\n          { station.properties.id }\n        </Popup>\n      </CircleMarker>\n    ));\n    return (\n      <div style={{ height: '100%' }}>\n        {stations.features.length && (\n        <Map\n          ref={(node) => { this.map = node; }}\n          center={center}\n          zoom={zoom}\n        >\n          <TileLayer\n            attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n          { markers }\n        </Map>\n        )}\n      </div>\n    );\n  }\n}\n\nStationMap.propTypes = {\n  stations: PropTypes.instanceOf(Object).isRequired,\n  center: PropTypes.arrayOf(PropTypes.number).isRequired,\n  zoom: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  stations: state.intermagnet.stations,\n  center: state.map.center,\n  zoom: state.map.zoom,\n});\n\nexport default connect(mapStateToProps)(StationMap);\n","/**\n * @module constants/actionTypes\n * @author Charles Blais, Natural Resource Canada <charles.blais@canada.ca>\n *\n * Constants\n * ==========\n */\n\nexport const URL_METADATA = 'example';\nexport const URL_METADATA_INSTITUTES = `${URL_METADATA}/institutes`;\nexport const URL_METADATA_CONTACTS = `${URL_METADATA}/contacts`;\nexport const URL_METADATA_INTERMAGNET = `${URL_METADATA}/intermagnet`;\nexport const URL_METADATA_DEFINITIVE = `${URL_METADATA}/definitive`;\n\nexport const COUNTRY_CODES = {\n  aq: 'Antarctica',\n  ar: 'Argentina',\n  at: 'Austria',\n  au: 'Australia',\n  be: 'Belgium',\n  bg: 'Bulgaria',\n  br: 'Brazil',\n  ca: 'Canada',\n  cf: 'Central African Republic',\n  cl: 'Chile',\n  cn: 'China',\n  cz: 'Czech Republic',\n  de: 'Germany',\n  dk: 'Denmark',\n  dz: 'Algeria',\n  es: 'Spain',\n  et: 'Ethiopia',\n  fi: 'Finland',\n  fk: 'Falkland Islands (Islas Malvinas)',\n  fr: 'France',\n  gb: 'United Kingdom',\n  gf: 'French Guiana',\n  gl: 'Greenland',\n  gr: 'Greece',\n  gs: 'South Georgia and the South Sandwich Islands',\n  hr: 'Croatia',\n  hu: 'Hungary',\n  ie: 'Republic of Ireland',\n  in: 'India',\n  it: 'Italy',\n  jp: 'Japan',\n  kr: 'Korea',\n  kz: 'Kazakhstan',\n  lb: 'Lebanon',\n  mg: 'Madagascar',\n  mv: 'Maldives',\n  mx: 'Mexico',\n  na: 'Namibia',\n  no: 'Norway',\n  nz: 'New Zealand',\n  pe: 'Peru',\n  pf: 'French Polynesia',\n  pk: 'Pakistan',\n  pl: 'Poland',\n  ro: 'Romania',\n  rs: 'Serbia',\n  ru: 'Russia',\n  se: 'Sweden',\n  sh: 'Saint Helena, Ascension and Tristan da Cunha, British Overseas Territories',\n  sk: 'Slovakia',\n  sn: 'Senegal',\n  tf: 'French Southern and Antarctic Lands',\n  tr: 'Turkey',\n  tw: 'Taiwan',\n  ua: 'Ukraine',\n  us: 'United States of America',\n  vn: 'Vietnam',\n  ws: 'Western Samoa',\n  za: 'South Africa',\n};\n","/**\n * @module actions\n * @author Charles Blais, Natural Resource Canada <charles.blais@canada.ca>\n *\n * Redux Actions\n * =============\n */\n\n// Required modules\nimport axios from 'axios';\n\nimport {\n  URL_METADATA_CONTACTS,\n  URL_METADATA_DEFINITIVE,\n  URL_METADATA_INSTITUTES,\n  URL_METADATA_INTERMAGNET,\n} from '../constants';\nimport * as types from '../constants/actionTypes';\n\n\n/**\n * Convert the INTERMAGNET JSON object to GeoJSON for\n * simplicity.  In short, we simply take the latitude and longitde\n * and convert the object to a GeoJSON Point feature\n *\n * @param {Object} intermagnet - intermagnet json object\n * @return {Object} intermagnet geojson object\n */\nfunction convertIntermagnetToGeoSJON(intermagnet) {\n  return {\n    type: 'FeatureCollection',\n    features: intermagnet.map((station) => {\n      const longitude = (station.longitude > 180) ? station.longitude - 360.0 : station.longitude;\n      return {\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [\n            longitude,\n            station.latitude,\n            station.elevation],\n        },\n        properties: station,\n      };\n    }),\n  };\n}\n\n\n/**\n * Set map center\n *\n * @param {Array} coord - array with latitude and longitude\n * @return {Object} action for redux\n */\nexport const setMapCenter = coord => ({ type: types.SET_MAP_CENTER, payload: coord });\n\n/**\n * Set map zoom\n *\n * @param {int} level - zoom level\n * @return {Object} action for redux\n */\nexport const setMapZoom = level => ({ type: types.SET_MAP_ZOOM, payload: level });\n\n\n/**\n * Select stations\n *\n * @param {Array} stations - array of select stations by their ID\n * @return {Object} action for redux\n */\nexport const selectStations = stations => ({ type: types.SELECT_STATIONS, payload: stations });\n\n/**\n * Highlight stations\n *\n * @param {Array} stations - array of select stations by their ID\n * @return {Object} action for redux\n */\nexport const highlightStations = stations => ({\n  type: types.HIGHLIGHT_STATIONS,\n  payload: stations,\n});\n\n\n/**\n * Fetch response from metadata system\n *\n * @return {Promise<Array>} intermagnet stations\n */\nexport const fetchStations = () => dispatch => new Promise((resolve) => {\n  dispatch({\n    type: types.FETCH_METADATA,\n    payload: axios.get(URL_METADATA_INTERMAGNET, { responseType: 'json' }),\n  }).then((response) => {\n    const intermagnet = convertIntermagnetToGeoSJON(response.value.data);\n    dispatch({\n      type: types.SET_STATIONS,\n      payload: intermagnet,\n    });\n    resolve(intermagnet);\n  });\n});\n\n\n/**\n * Fetch response from metadata system\n *\n * @return {Promise<Array>} contacts\n */\nexport const fetchContacts = () => dispatch => new Promise((resolve) => {\n  dispatch({\n    type: types.FETCH_METADATA,\n    payload: axios.get(URL_METADATA_CONTACTS, { responseType: 'json' }),\n  }).then((response) => {\n    dispatch({\n      type: types.SET_CONTACTS,\n      payload: response.value.data,\n    });\n    resolve(response.value.data);\n  });\n});\n\n\n/**\n * Fetch response from metadata system\n *\n * @return {Promise<Array>} institutes\n */\nexport const fetchInstitutes = () => dispatch => new Promise((resolve) => {\n  dispatch({\n    type: types.FETCH_METADATA,\n    payload: axios.get(URL_METADATA_INSTITUTES, { responseType: 'json' }),\n  }).then((response) => {\n    dispatch({\n      type: types.SET_INSTITUTES,\n      payload: response.value.data,\n    });\n    resolve(response.value.data);\n  });\n});\n\n\n/**\n * Fetch response from metadata system\n *\n * @return {Promise<Array>} definitive\n */\nexport const fetchDefinitive = () => dispatch => new Promise((resolve) => {\n  dispatch({\n    type: types.FETCH_METADATA,\n    payload: axios.get(URL_METADATA_DEFINITIVE, { responseType: 'json' }),\n  }).then((response) => {\n    dispatch({\n      type: types.SET_DEFINITIVE,\n      payload: response.value.data,\n    });\n    resolve(response.value.data);\n  });\n});\n","/**\n * @module components/StationTable\n * @author Charles Blais, Natural Resource Canada <charles.blais@canada.ca>\n *\n * Station Table\n * ==============\n */\n\n// General modules\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ReactTable from 'react-table';\n\nimport 'react-table/react-table.css';\n\nimport { COUNTRY_CODES } from '../constants';\nimport * as actions from '../actions';\n\n\nconst StationTable = (props) => {\n  const {\n    stations,\n    setMapCenter,\n    selectStations,\n    highlightStations,\n  } = props;\n\n  const columns = [{\n    Header: 'IAGA code',\n    id: 'iaga',\n    accessor: 'properties.iaga',\n    width: 100,\n  }, {\n    Header: 'Name',\n    accessor: 'properties.name',\n  }, {\n    Header: 'Country',\n    accessor: 'properties.country',\n    Cell: row => ((row.value in COUNTRY_CODES) ? COUNTRY_CODES[row.value] : row.value),\n  }];\n\n  const defaultSorting = [{\n    id: 'iaga',\n    desc: false,\n  }];\n\n  return (\n    <ReactTable\n      data={stations.features}\n      className=\"-striped -highlight\"\n      columns={columns}\n      filterable\n      sorted={defaultSorting}\n      getTrProps={(state, rowInfo) => ({\n        onClick: () => {\n          setMapCenter([\n            rowInfo.original.geometry.coordinates[1],\n            rowInfo.original.geometry.coordinates[0],\n          ]);\n          selectStations([rowInfo.original.properties.id]);\n        },\n        onMouseOver: () => {\n          highlightStations([rowInfo.original.properties.id]);\n        },\n      })}\n    />\n  );\n};\n\nStationTable.propTypes = {\n  stations: PropTypes.instanceOf(Object).isRequired,\n  setMapCenter: PropTypes.func.isRequired,\n  selectStations: PropTypes.func.isRequired,\n  highlightStations: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  stations: state.intermagnet.stations,\n  institutes: state.intermagnet.institutes,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setMapCenter: coord => dispatch(actions.setMapCenter(coord)),\n  selectStations: stations => dispatch(actions.selectStations(stations)),\n  highlightStations: stations => dispatch(actions.highlightStations(stations)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StationTable);\n","/**\n * @module App\n * @author Charles Blais, Natural Resource Canada <charles.blais@canada.ca>\n *\n * Main application\n * ================\n */\n\n// General modules\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Row, Col } from 'react-bootstrap';\n\nimport StationMap from '../components/StationMap';\nimport StationTable from '../components/StationTable';\nimport * as actions from '../actions';\n\nclass App extends React.Component {\n  componentDidMount() {\n    const {\n      fetchStations,\n      fetchInstitutes,\n      fetchContacts,\n      fetchDefinitive,\n    } = this.props;\n\n    fetchStations()\n      .then(() => fetchContacts()).then(() => fetchInstitutes()).then(() => fetchDefinitive());\n  }\n\n  render() {\n    return (\n      <Row className=\"full-height\">\n        <Col sm={3} className=\"intermagnet-table\">\n          <StationTable />\n        </Col>\n        <Col sm={9} className=\"intermagnet-map\">\n          <StationMap />\n        </Col>\n      </Row>\n    );\n  }\n}\n\n\nApp.propTypes = {\n  fetchStations: PropTypes.func.isRequired,\n  fetchInstitutes: PropTypes.func.isRequired,\n  fetchContacts: PropTypes.func.isRequired,\n  fetchDefinitive: PropTypes.func.isRequired,\n};\n\n\nconst mapDispatchToProps = dispatch => ({\n  fetchStations: () => dispatch(actions.fetchStations()),\n  fetchInstitutes: () => dispatch(actions.fetchInstitutes()),\n  fetchContacts: () => dispatch(actions.fetchContacts()),\n  fetchDefinitive: () => dispatch(actions.fetchDefinitive()),\n});\n\nexport default connect(null, mapDispatchToProps)(App);\n","/**\n * @module App\n * @author Charles Blais, Natural Resource Canada <charles.blais@canada.ca>\n */\n\n\nimport React from 'react';\n\n// Redux modules\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, createStore } from 'redux';\nimport { logger } from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport promise from 'redux-promise-middleware';\n\n// CSS modules\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\nimport './index.css';\n\n// User contributed modules\nimport reducer from './reducers';\nimport ContainerApp from './containers/App';\n\n// Create store\nconst store = createStore(\n  reducer,\n  applyMiddleware(promise, thunk, logger),\n);\n\nconst App = () => (\n  <Provider store={store}>\n    <ContainerApp />\n  </Provider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}